cutree_cols = length(colnames(numeric_data_scaled)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
install.packages("FactoMineR")
library(dplyr)
library(ggplot2)
library(ggpubr)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
numeric_data.pca <- prcomp(numeric_data,
scale = T)
numeric_data.pca
numeric_data.pca <- prcomp(numeric_data,
scale = T)
numeric_data.pca
summary(numeric_data.pca)
numeric_data.pca <- prcomp(numeric_data,
scale = T)
summary(numeric_data.pca)
str(life_expectancy_data)
life_expectancy_data$continent
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
stat_subset
stat.test <- pima[pima$pressure>5,] %>%
t_test(pressure ~ diabetes_ch) %>%
add_xy_position(x = "diabetes_ch")
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
stat_subset
stat.test <- stat_subset %>%
t_test(`Life expectancy` ~ continent)
stat.test
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
stat.test <- stat_subset %>%
t_test(`Life expectancy` ~ continent)
stat.test
ggboxplot(
stat_subset,
x = "continent", y = "Life expectancy",
add = "jitter"
) +
labs(subtitle = get_test_label(stat.test, detailed = TRUE)) +
stat_pvalue_manual(stat.test, tip.length = 0)
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
stat.test <- stat_subset %>%
t_test(`Life expectancy` ~ continent)
stat.test
ggboxplot(
stat_subset,
x = "continent", y = "Life expectancy",
add = "jitter"
)
ggqqplot(stat_subset, x = `Life expectancy`, facet.by = continent)
ggqqplot(stat_subset, x = `Life expectancy`, facet.by = "continent")
ggqqplot(stat_subset, x = "Life expectancy"", facet.by = "continent")
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
ggqqplot(stat_subset, x = "Life expectancy"", facet.by = "continent")
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
ggqqplot(stat_subset, x = "Life expectancy", facet.by = "continent")
stat.test <- stat_subset %>%
t_test(`Life expectancy` ~ continent)
stat.test
ggboxplot(
stat_subset,
x = "continent", y = "Life expectancy",
add = "jitter"
)
shapiro.test(stat_subset$`Life expectancy`)
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
stat.test <- stat_subset %>%
t_test(`Life expectancy` ~ continent)
stat.test
ggboxplot(
stat_subset,
x = "continent", y = "Life expectancy",
add = "jitter"
)
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
stat.test <- stat_subset %>%
wilcox.test(`Life expectancy` ~ continent)
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
stat.test <- stat_subset %>%
wilcox_test(`Life expectancy` ~ continent)
stat.test
ggboxplot(
stat_subset,
x = "continent", y = "Life expectancy",
add = "jitter"
)
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
# распредеоения не являются нормальными, используем тест Манна- Уитни
stat.test <- stat_subset %>%
wilcox_test(`Life expectancy` ~ continent)
stat.test
ggboxplot(
stat_subset,
x = "continent", y = "Life expectancy",
add = "jitter"
)
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
# распредеоения не являются нормальными, используем тест Манна- Уитни
stat.test <- stat_subset %>%
wilcox_test(`Life expectancy` ~ continent)
stat.test
ggboxplot(
stat_subset,
x = "continent", y = "Life expectancy",
add = "jitter"
)+
labs(subtitle = get_test_label(stat.test, detailed = TRUE))
# 2-й способ
corrplot(cor(numeric_data), tl.cex = 0.5, method = 'square', order = 'FPC', type = 'lower', diag = FALSE)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
install.packages("ggbiplot")
install.packages("ggbiplot")
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
devtools::install_github("vqv/ggbiplot")
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
theme_minimal()
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
theme_minimal()
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1, color = continent) +
theme_minimal()
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1,
groups = numeric_data$continent) +
theme_minimal()
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
theme_minimal()
numeric_data.pca
plot_ly(numeric_data.pca,
x = ~PC1, y = ~PC2,
color = ~numeric_data$continent,
colors = c('#636EFA','#EF553B','#00CC96'),
type = 'scatter', mode = 'markers')
numeric_data.pca[["x"]]
plot_ly(numeric_data.pca[["x"]],
x = ~PC1, y = ~PC2,
color = ~numeric_data$continent,
colors = c('#636EFA','#EF553B','#00CC96'),
type = 'scatter', mode = 'markers')
plot_ly(as.data.frame(numeric_data.pca[["x"]]),
x = ~PC1, y = ~PC2,
color = ~numeric_data$continent,
colors = c('#636EFA','#EF553B','#00CC96'),
type = 'scatter', mode = 'markers')
plot_ly(as.data.frame(numeric_data.pca[["x"]]),
x = ~PC1, y = ~PC2,
type = 'scatter', mode = 'markers')
numeric_data
life_expectancy_data.pca <- prcomp(life_expectancy_data,
scale = T)
numeric_data.pca <- prcomp(numeric_data,
scale = T)
summary(numeric_data.pca)
# можно сказать, что 80% всех наблюдений (их варианция) объясняется первыми 6 главными компонентами
plot_ly(as.data.frame(numeric_data.pca[["x"]]),
x = ~PC1, y = ~PC2,
color = life_expectancy_data$Country,
type = 'scatter', mode = 'markers')
ggbiplot(pima_full.pca,
scale=0, alpha = 0.1) +
theme_minimal()
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
theme_minimal()
bi_plot <- ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
theme_minimal()
ggplotly(bi_plot)
bi_plot <- ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
theme_minimal()
ggplotly(bi_plot, color = life_expectancy_data$Country)
bi_plot <- ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
geom_point(aes(color = life_expectancy_data$Country))+
theme_minimal()
ggplotly(bi_plot)
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1)
bi_plot <- ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
geom_point(aes(color = life_expectancy_data$continent))+
theme_minimal()
ggplotly(bi_plot)
bi_plot <- ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
geom_point(aes(color = life_expectancy_data$continent, size = life_expectancy_data$Country))+
theme_minimal()
ggplotly(bi_plot)
bi_plot <- ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
geom_point(aes(color = life_expectancy_data$continent, fill = life_expectancy_data$Country))+
theme_minimal()
ggplotly(bi_plot)
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
library(tidymodels)
install.packages("tidymodels")
install.packages("embed")
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
library(tidymodels)
library(embed)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
library(tidymodels)
library(embed)
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
umap_prep %>%
ggplot(aes(UMAP1, UMAP2))
install.packages("Matrix")
install.packages("Matrix")
knitr::opts_chunk$set(echo = TRUE)
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
library(tidymodels)
library(embed)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
library(tidymodels)
library(embed)
life_expectancy_data <- readRDS("life_expectancy_data.RDS")
head(life_expectancy_data, 10)
life_expectancy_data$Country <- as.factor(life_expectancy_data$Country)
life_expectancy_data$Gender<- as.factor(life_expectancy_data$Gender)
#str(life_expectancy_data)
plot_ly(data = life_expectancy_data,
x = ~ `Life expectancy`,
y = ~ Unemployment,
color = ~ continent,
marker = list(size = 10)) %>%
layout(
title = 'Отношение безработицы и ожидаемой продолжительности жизни')
stat_subset <- subset(life_expectancy_data, life_expectancy_data$continent %in% c("Africa", "Americas"))
#stat_subset
# распределения не являются нормальными, используем тест Манна- Уитни
stat.test <- stat_subset %>%
wilcox_test(`Life expectancy` ~ continent)
stat.test
ggboxplot(
stat_subset,
x = "continent", y = "Life expectancy",
add = "jitter"
)+
labs(subtitle = get_test_label(stat.test, detailed = TRUE))
numeric_data <- life_expectancy_data[, c(-1, -2, -3, -23)]
# str(numeric_data)
# 1-й способ
corrplot(cor(numeric_data), tl.cex = 0.5, method = 'shade', order = 'AOE')
# 2-й способ
corrplot(cor(numeric_data), tl.cex = 0.5, method = 'square', order = 'FPC', type = 'lower', diag = FALSE)
numeric_data_scaled <- scale(as.data.frame(numeric_data))
numeric_data_dist <- dist(numeric_data_scaled,
method = "euclidean")
numeric_data_clear_hc <- hclust(d = numeric_data_dist,
method = "ward.D2")
# построение дендограммы
fviz_dend(x = numeric_data_clear_hc, cex = 0.8, k = 3, rect = TRUE,
lwd = 0.7,
k_colors = "jco",
rect_border = "jco",
rect_fill = TRUE,
horiz = TRUE,
type = "phylogenic")
pheatmap(numeric_data_scaled,
show_rownames = FALSE,
clustering_distance_rows = numeric_data_dist,
clustering_method = "ward.D2",
cutree_rows = 6,
cutree_cols = length(colnames(numeric_data_scaled)),
angle_col = 45,
main = "Dendrograms for clustering rows and columns with heatmap")
# Анализ: в данном случае можно выделить 6 кластеров по наблюдений(например) в ручную, ято и показано на дендограме; тажке были выделены кластеры по колонкам( дендограмма сверху показывает близость колонок друг к другу); в данном случае явно выделяются 2 кластера (хотя выделить можно и больше); в первом кластере 7 столбцов, во втором - все остальные (см. построенный heatmap)
numeric_data.pca <- prcomp(numeric_data,
scale = T)
summary(numeric_data.pca)
# можно сказать, что 80% всех наблюдений (их варианция) объясняется первыми 6 главными компонентами
bi_plot <- ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1) +
geom_point(aes(color = life_expectancy_data$continent, fill = life_expectancy_data$Country))+
theme_minimal()
ggplotly(bi_plot)
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
install.packages("remotes")
remotes::install_version("Matrix", version = "1.6-1")
packageVersion("Matrix")
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
umap_prep %>%
ggplot(aes(UMAP1, UMAP2))
umap_prep
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
library(dplyr)
umap_prep <- recipe(~., data = numeric_data) %>%
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
umap_prep <- recipe(~., data = numeric_data) %>% # "техническая" строка, нужная для работы фреймворка tidymodels
step_normalize(all_predictors()) %>% # нормируем все колонки
step_umap(all_predictors()) %>%  # проводим в UMAP. Используем стандартные настройки. Чтобы менять ключевой параметр (neighbors), нужно больше погружаться в машинное обучение
prep() %>%  # "техническая" строка, нужная для работы фреймворка tidymodels. Мы выполняем все степы выше
juice() # Финальная строка - приводим результаты UMAP к стандартизированному датасету
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1)
ggbiplot(numeric_data.pca,
scale=0, alpha = 0.1)
ggbiplot(numeric_data.pca,
select.var = list(contrib = 3)
scale=0, alpha = 0.1)
ggbiplot(numeric_data.pca,
select.var = list(contrib = 3),
scale=0, alpha = 0.1)
ggbiplot(numeric_data.pca,
select.var = list(contrib = 3),
scale=0, alpha = 0.1, col.var = "contrib")
fviz_pca_var(numeric_data.pca,
select.var = list(contrib = 3),
scale=0, alpha = 0.1, col.var = "contrib")
bi_plot <- ggbiplot(numeric_data.pca,
scale=0, alpha = 0.5) +
geom_point(aes(color = life_expectancy_data$continent, fill = life_expectancy_data$Country))+
theme_minimal()
ggplotly(bi_plot)
fviz_pca_var(numeric_data.pca,
+          select.var = list(contrib = 3),
fviz_pca_var(numeric_data.pca,
select.var = list(contrib = 3),
scale=0, alpha = 0.1, col.var = "contrib")
fviz_pca_var(numeric_data.pca,
select.var = list(contrib = 3),
scale=0, alpha = 0.1, col.var = "contrib")
fviz_pca_var(numeric_data.pca,
select.var = list(contrib = 3),
scale=0, alpha = 0.1, col.var = "contrib")
fviz_pca_var(numeric_data.pca,
select.var = list(contrib = 3),
scale=0, alpha = 1, col.var = "contrib")
str(life_expectancy_data)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rstatix)
library(plotly)
library(corrplot)
library(factoextra)
library(pheatmap)
library(igraph)
library(FactoMineR)
library(ggbiplot)
library(tidymodels)
library(embed)
life_expectancy_data <- readRDS("life_expectancy_data.RDS")
# head(life_expectancy_data, 10)
life_expectancy_data <- readRDS("life_expectancy_data.RDS")
# head(life_expectancy_data, 10)
life_expectancy_data <- readRDS("life_expectancy_data.RDS")
# head(life_expectancy_data, 10)
